services:
  # PostgreSQL database
  postgres:
    image: postgres:14
    container_name: owleyes-postgres
    restart: unless-stopped
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backend/database.sql:/docker-entrypoint-initdb.d/01-init.sql
      - ./backend/database_seed.sql:/docker-entrypoint-initdb.d/02-seed.sql
    env_file:
      - backend/.env
    ports:
      - "5432:5432"
    networks:
      - owleyes-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $POSTGRES_USER"]
      interval: 30s
      timeout: 10s
      retries: 5
      
  # PHP Backend
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: owleyes-backend
    restart: unless-stopped
    depends_on:
      - postgres
    volumes:
      - ./backend/src:/var/www/src
      - ./backend/public:/var/www/public
      - ./backend/tests:/var/www/tests
      - ./backend/logs:/var/www/logs
      - ./backend/.env:/var/www/.env
    env_file:
      - backend/.env
    ports:
      - "8000:80"
    networks:
      - owleyes-network
      
  # Monitoring Service
  monitoring:
    build:
      context: ./backend
      dockerfile: ./docker/monitoring/Dockerfile
    container_name: owleyes-monitoring
    restart: unless-stopped
    depends_on:
      - postgres
    volumes:
      - ./backend/src:/app/src
      - ./backend/logs:/app/logs
      - ./backend/.env:/app/.env
    env_file:
      - backend/.env
    networks:
      - owleyes-network
      
  # React Frontend
  frontend:
    build:
      context: ./frontend
      dockerfile: ../docker/frontend/Dockerfile
    container_name: owleyes-frontend
    working_dir: /app
    restart: unless-stopped
    volumes:
      - ./frontend:/app
    env_file:
      - backend/.env
    ports:
      - "3000:3000"
    networks:
      - owleyes-network

# Create a custom network
networks:
  owleyes-network:
    driver: bridge

# Define volumes
volumes:
  postgres_data: 